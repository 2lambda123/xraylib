#!/usr/bin/env perl
#
#
#

use strict;
use warnings;
use WWW::Curl::Easy;
use XML::LibXML;
use Data::Dumper;
use xraylib;
use Scalar::Util qw(looks_like_number);

my $lbl_url = "http://ie.lbl.gov/toi/nuclide.asp?iZA=";

my $curl = WWW::Curl::Easy->new;
$curl->setopt(CURLOPT_FAILONERROR, 1);

my @nuclide_codes = ("260055", "940238", "960244", "480109", "530125", "950241", "640153", "270057", "560133", "550137");

@nuclide_codes = sort @nuclide_codes;

#print Dumper(\@nuclide_codes);

open (OUTPUT_INT, ">", "../../src/xraylib-radionuclides-internal.h");
open (OUTPUT_HEADER, ">", "../../include/xraylib-radionuclides.h");

my $header_begin = <<'HEADER';
/*
Copyright (c) 2014, Tom Schoonjans
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
    * The names of the contributors may not be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Tom Schoonjans ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Tom Schoonjans BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
 * This file was automatically generated by nuclides.pl
 * Modify at your own risk...
 */


#ifndef XRAYLIB_RADIO_NUCLIDES_H
#define XRAYLIB_RADIO_NUCLIDES_H


struct radioNuclideData{
	char *name;
	int Z;
	int A;
	int N;
	int Z_xray;
	int nXrays;
	int *XrayLines;
	double *XrayIntensities;
	int nGammas;
	double *GammaEnergies;
	double *GammaIntensities;
};


/*
 *
 * Returns a pointer to a newly allocated struct containing
 * the requested radionuclide on success, or NULL when the radionuclide 
 * was not found in the list. The radionuclide is requested by providing
 * its name as argument to the function. For a list of available names,
 * use GetRadioNuclideList.
 *
 * The returned struct should be freed after usage with FreeRadioNuclideData.
 *
 */
struct radioNuclideData *GetRadioNuclideDataByName(const char radioNuclideString[]);

/*
 *
 * Returns a pointer to a newly allocated struct containing
 * the requested radionuclide on success, or NULL when the radionuclide
 * was not found in the list. The radionuclide is requested by providing
 * its index in the internal table to the function. Typically this would
 * be done using the RADIO_NUCLIDE_* macros in this file.
 *
 * The returned struct should be freed after usage with FreeRadioNuclideData.
 *
 */
struct radioNuclideData *GetRadioNuclideDataByIndex(int radioNuclideIndex);

/*
 *
 * Returns a NULL-terminated array of strings of all the radionuclides in the
 * internal table. If nRadioNuclides is not NULL, it shall receive the number 
 * of radionuclides.
 *
 * The returned array should be freed firstly by using xrlFree to deallocate
 * all individual strings, and subsequently by using xrlFree to deallocate the array
 *
 */
char **GetRadioNuclideDataList(int *nRadioNuclides);

/*
 *
 * Deallocates a pointer to a radioNuclideData struct completely.
 * It is recommended to set the pointer to NULL after calling this function.
 *
 */
void FreeRadioNuclideData(struct radioNuclideData *radioNuclideData);

HEADER

print OUTPUT_HEADER $header_begin;

my $header_begin2 = <<'EOF2';
/*
Copyright (c) 2014, Tom Schoonjans
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
    * The names of the contributors may not be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Tom Schoonjans ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Tom Schoonjans BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
 * This file was automatically generated by nuclides.pl
 * Modify at your own risk...
 */

#include <xraylib.h>

EOF2

print OUTPUT_INT $header_begin2;

my $nuclideIndex = 0;

my @nuclideData;

foreach my $nuclide_code (@nuclide_codes) {
	print $nuclide_code."\n";
	my $url = $lbl_url.$nuclide_code;	

	#use curl to download the files
	$curl->setopt(CURLOPT_URL, $url);
	my $html_file="";
	open(my $fileb, ">", \$html_file);

	$curl->setopt(CURLOPT_WRITEDATA, \$fileb);
	my $rv = $curl->perform;
	if ($rv != 0) {
		printf "Curl error for file %s: %s\n", $url, $curl->getinfo(CURLINFO_HTTP_CODE);
		exit 1;
	}
	else {
		print "$url downloaded!\n";
	}
	$html_file =~ s/(<\/FONT>\r\n)<\/FONT>/$1/m;
	$html_file =~ s/(Tables:<\/A>)<\/FONT>/$1/;
	$html_file =~ s/(ENSDF data:<\/A>)<\/FONT>/$1/;
	$html_file =~ s/(Java applets:<\/A>)<\/FONT>/$1/;
	$html_file =~ s/(TORI Data \(1999\))(<\/font>)(<\/I>)/$1$3$2/;
	$html_file =~ s/(<\/B>)(<\/FONT>)(<P>)/$2$1$3/;
	$html_file =~ s/&nbsp;<I>.+<\/I>&nbsp;//g;
	$html_file =~ s/&nbsp;<i>.+<\/i>&nbsp;//g;
	$html_file =~ s/&nbsp;//g;
	$html_file =~ s/(<TD>)<\d.+(<\/TD>)/$1$2/g;
	#print $html_file;
	#exit 1;
	my $dom = XML::LibXML->load_html(string => $html_file);
	#my $dom = XML::LibXML->load_html(string => $html_file, recover => 1, suppress_errors => 1);
	my $xpc = XML::LibXML::XPathContext->new($dom);

	#my $xpath_element = "//BODY/center/TABLE/center/TABLE/CAPTION/TABLE/TR[2]/TH/FONT";
	my $xpath_Z = "/html/body/center/table/tr[3]/td[2]/center/table[1]/caption/table/tr[2]/th[1]/font";
	my $xpath_A = "/html/body/center/table/tr[3]/td[2]/center/table[1]/caption/table/tr[1]/th[1]/font";
	my $xpath_N = "/html/body/center/table/tr[3]/td[2]/center/table[1]/caption/table/tr[2]/th[2]/font";

	my %nuclideDataSingle;

	my $Z = $xpc->findvalue($xpath_Z, $dom);
	my $A = $xpc->findvalue($xpath_A, $dom);
	my $N = $xpc->findvalue($xpath_N, $dom);
	print "Z:".$Z."\n";
	print "A:".$A."\n";
	print "N:".$N."\n";

	$nuclideDataSingle{Z} = $Z;
	$nuclideDataSingle{A} = $A;
	$nuclideDataSingle{N} = $N;
	$nuclideDataSingle{name} = $A.&xraylib::AtomicNumberToSymbol($Z);

	##gamma stuff
	#my $xpath_gamma = "/html/body/center/table/tr[3]/td[2]/center/table[3]/tr[position() >= 4 and position() <= count(..)]";
	my $xpath_gamma = "/html/body/center/table/tr[3]/td[2]/center/table[3]/tr[position() >= 4 and position() < count(/html/body/center/table/tr[3]/td[2]/center/table[3]/tr)]";
	my @gamma_nodes = $xpc->findnodes($xpath_gamma, $dom);

	print "gamma nodes number: ".scalar(@gamma_nodes)."\n";

	my @gamma_energies;
	my @gamma_intensities;

	foreach my $node (@gamma_nodes) {
		my $gamma_intensity = $xpc->findvalue("td[2]", $node);
		next unless (looks_like_number($gamma_intensity));

		push @gamma_energies, $xpc->findvalue("td[1]", $node);
		push @gamma_intensities, $gamma_intensity/100.0;
		#print $xpc->find("td[1]", $node), $xpc->findvalue("td[2]", $node),"\n";
	}

	$nuclideDataSingle{nGammas} = scalar(@gamma_energies);
	$nuclideDataSingle{gammaEnergies} = \@gamma_energies;
	$nuclideDataSingle{gammaIntensities} = \@gamma_intensities;


	##X-rays
	my $xpath_xray= "/html/body/center/table/tr[3]/td[2]/center/table[4]/tr[position() >= 4 and position() <= count(/html/body/center/table/tr[3]/td[2]/center/table[4]/tr)]";
	my @xray_nodes = $xpc->findnodes($xpath_xray, $dom);

	print "xray nodes number: ".scalar(@xray_nodes)."\n";

	my @xray_lines;
	my @xray_intensities;

	#extract X-ray element
	my $Z_xray = substr($xpc->findvalue("td[3]", $xray_nodes[0]),0,1);
	if (substr($xpc->findvalue("td[3]", $xray_nodes[0]),1,1) =~ /[a-z]/) {
		$Z_xray .= substr($xpc->findvalue("td[3]", $xray_nodes[0]),1,1);
	}
		
	$nuclideDataSingle{Z_xray} = &xraylib::SymbolToAtomicNumber($Z_xray);
	print "Z_xray: ".$nuclideDataSingle{Z_xray}."\n";

	foreach my $node (@xray_nodes) {
		my $xray_intensity = $xpc->findvalue("td[2]", $node);
		next unless (looks_like_number($xray_intensity));

		#print $xpc->findvalue("td[3]", $node)."\n";
		my $line = $xpc->findvalue("td[3]", $node);
		$line =~ s/$Z_xray//;
		$line = uc($line)."_LINE";
		print "line: $line\n";

		printf "Energies: %g  %g\n", $xpc->findvalue("td[1]", $node), &xraylib::LineEnergy($nuclideDataSingle{Z_xray}, ${$xraylib::{$line}});

		push @xray_intensities, $xray_intensity/100.0;
		push @xray_lines, $line;
		#print $xpc->find("td[1]", $node), $xpc->findvalue("td[2]", $node),"\n";
	}

	$nuclideDataSingle{nXrays} = scalar(@xray_intensities);
	print "nXrays: ".$nuclideDataSingle{nXrays}."\n";
	$nuclideDataSingle{xrayIntensities} = \@xray_intensities;
	$nuclideDataSingle{xrayLines} = \@xray_lines;

	printf OUTPUT_HEADER "#define RADIO_NUCLIDE_%s %i\n", uc($nuclideDataSingle{name}), $nuclideIndex++;

	push @nuclideData, \%nuclideDataSingle;

}

printf OUTPUT_INT "static const int nNuclideDataList = %i;\n", $nuclideIndex;

for (my $i = 0 ; $i < scalar(@nuclideData) ; $i++) {
	printf OUTPUT_INT "static int __NuclideDataList_XrayLines_%i[] = {%s};\n",$i, join(", ",@{$nuclideData[$i]->{xrayLines}});
	printf OUTPUT_INT "static double __NuclideDataList_XrayIntensities_%i[] = {%s};\n",$i, join(", ",@{$nuclideData[$i]->{xrayIntensities}});
	printf OUTPUT_INT "static double __NuclideDataList_GammaEnergies_%i[] = {%s};\n",$i, join(", ",@{$nuclideData[$i]->{gammaEnergies}});
	printf OUTPUT_INT "static double __NuclideDataList_GammaIntensities_%i[] = {%s};\n",$i, join(", ",@{$nuclideData[$i]->{gammaIntensities}});
}

printf OUTPUT_INT "static const struct radioNuclideData nuclideDataList[] = {\n";
for (my $i = 0 ; $i < scalar(@nuclideData) ; $i++) {
	printf OUTPUT_INT "{\"%s\" ,%i, %i, %i, %i, %i, __NuclideDataList_XrayLines_%i, __NuclideDataList_XrayIntensities_%i, %i, __NuclideDataList_GammaEnergies_%i, __NuclideDataList_GammaIntensities_%i}",
		$nuclideData[$i]->{name},
		$nuclideData[$i]->{Z},
		$nuclideData[$i]->{A},
		$nuclideData[$i]->{N},
		$nuclideData[$i]->{Z_xray},
		$nuclideData[$i]->{nXrays},
		$i,
		$i,
		$nuclideData[$i]->{nGammas},
		$i,
		$i;
	if ($i ne scalar(@nuclideData) -1) {
		printf OUTPUT_INT ",\n";
	}
	else {
		printf OUTPUT_INT "\n";
	}
}

printf OUTPUT_INT "};\n";

printf OUTPUT_HEADER "\n#endif\n";

close OUTPUT_INT;
close OUTPUT_HEADER;

