Some info on how we have built the Windows package:

First of all: we don't compile it on Windows itself! It may be possible using mingw32 and msys but we haven't tried it (feel free to report us your successes and/or failures in this regard). Instead we use a cross-compiler on linux by running configure with the option: --host=i386-mingw32 or something similar depending on your mingw32 installation. This will also test for the presence of wine (The WINdows Emulator), due to its requirement during the build phase. Assuming make and make check didn't end horribly, you now have built the dll and static archive of xraylib that can be used on the Windows platform. Unfortunately these files can not be linked in on Windows when you use the Microsoft Visual C++ compiler (MSVC) due to the missing .lib file. To produce this file, we used a trick described on http://www.mingw.org/wiki/MSVC_and_MinGW_DLLs

We used the DEF file produced during the compilation phase, copied it to a Windows machine with MSVC installed and ran the following command on a Windows shell:

lib /machine:i386 /def:libxrl-{version}.def

This produces the required .LIB file. This file works fine with MSVC but fails horribly when using the Borland compiler... There appears to be an incompatibility in the format of the .LIB files required for compilation between Borland on the one hand and mingw/MSVC/Intel C++ on the other hand.
However: we produced a Borland compatible .LIB file using the implib.exe command (part of the Borland C++ package):

implib.exe -a -c libxrl-{version}-bcc.lib libxrl-{version}.dll


Now to produce the installer itself we used the NullSoft Installer System. After running ./configure, a script xraylib.nsi will be produced in the nsis subdirectory of the xraylib package. After the crosscompilation, run "makensis xraylib.nsi" in this folder to create the executable. Note that this does not work with the NSIS package available from MacPorts!!! We used Fedora 11 to create the package. 


----

Python bindings
===============

These were compiled using the mingw32 compiler for windows using a modified version of the xrlsetup.py file found in the python folder.
The command we used:

python xrlsetup.py build_ext --inplace --compiler=mingw32

The produced _xraylib.pyd file is of course dependent on the python version it was compiled against...
The package includes bindings for Python version 2.6, 2.7 and 3.1.


----


IDL bindings
============

The IDL bindings for Windows were compiled using the MAKE_DLL procedure, callable from within IDL. Before executing the routine itself, we changed the !MAKE_DLL IDL system variable as follows:

!MAKE_DLL.COMPILER_NAME='GCC'
!MAKE_DLL.CC='gcc.exe %X -fPIC -I"C:\Program Files (x86)\ITT\IDL\IDL80\external\include" -c -D_REENTRANT %C -o %O'

It is important here NOT to change the value of !MAKE_DLL.LD

The MAKE_DLL command itself was:

make_dll,'xraylib_idl','libxrlidl','IDL_Load',INPUT_DIR='.',EXTRA_CFLAGS='-I"C:\Program Files (x86)\xraylib\Include"',EXTRA_LFLAGS='"C:\Program Files (x86)\xraylib\Lib\libxrl-3.lib" /LIBPATH="C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\Lib"',OUTPUT='.'

Depending on the versions of IDL, xraylib and Visual Studio that are installed, these commands may need to be altered.


----


.NET bindings
=============

The .NET Framework can be installed on computers running Microsoft Windows operating systems. It supports multiple programming languages, including C#, VB.NET, C++/CLI, Pascal, Fortran and includes a large class library for that solves many common programming problems. Microsoft offers free versions of its Express Edition compilers from  http://www.microsoft.com/express/ 

These were compiled using Visual Studio 2008 Standard and was built against .NET Framework Version 2. The binding consists of a single, mixed-mode assembly XrayLib.NET.dll written in C++/CLI. The assembly provides the interop between a managed XrayLib class and the native functions and types exposed by libxrl-3.dll. This combines the language interoperability of .NET with the performance of the native underlying functions. 

A pre-built Release version of the assembly and an example program can be found in the bin folder together with a HTML Help v1 file.

To use XrayLib.NET.dll in Visual Studio:

1)     Right-click on your project in the Solution Explorer

2)     Click the References... menu item

3)     Click the Add New Reference... button in the dialog box

4)     Click the Browse tab of the Add Reference dialog box

5)     Navigate to the xraylib Lib folder and select the XrayLib.NET.dll file

6)     Click the OK buttons to add the assembly reference and close the dialog boxes

7)     Assuming you are using C#, add the following line to the top of your source code file

using Science;

8)     To create a instance of the XrayLib class that provides access to the XrayLib functionality, use the make the following call

XrayLib xl = XrayLib.Instance;

The class uses the static property Instance to implement a singleton pattern so that only a single instance of the XrayLib class is created and can be used throughout your program.  
